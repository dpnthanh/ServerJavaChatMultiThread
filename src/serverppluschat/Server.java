/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package serverppluschat;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.InterfaceAddress;
import java.net.NetworkInterface;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketException;
import java.util.Collection;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ListModel;

/**
 *
 * @author stephen
 */
public class Server extends javax.swing.JFrame {

    /**
     * Creates new form Server
     */
    public Server() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtServerStatus = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtServerHost = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        edtChangePort = new javax.swing.JTextField();
        btnStartStop = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        taInfo = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lsUser = new javax.swing.JList<>();
        btnRemoveUser = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        taChat = new javax.swing.JTextArea();
        edtSendMess = new javax.swing.JTextField();
        btnSendToAll = new javax.swing.JButton();
        btnSendTo = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        txtChooseName = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(254, 254, 254));

        jLabel2.setText("Status:");

        txtServerStatus.setText("Stop");

        jLabel4.setText("Host:");

        jLabel3.setText("Port:");

        btnStartStop.setText("Start Server");
        btnStartStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartStopActionPerformed(evt);
            }
        });

        jLabel5.setText("Info:");

        taInfo.setColumns(20);
        taInfo.setRows(5);
        jScrollPane2.setViewportView(taInfo);

        jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 24)); // NOI18N
        jLabel1.setText("SERVER");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtServerHost))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(edtChangePort, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnStartStop))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtServerStatus))
                            .addComponent(jLabel5))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtServerStatus))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtServerHost))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(edtChangePort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnStartStop))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2)
                .addContainerGap())
        );

        jLabel6.setText("User Manager");

        lsUser.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        lsUser.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lsUserMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(lsUser);

        btnRemoveUser.setText("Remove");
        btnRemoveUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveUserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(btnRemoveUser))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRemoveUser)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 489, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        taChat.setColumns(20);
        taChat.setRows(5);
        jScrollPane3.setViewportView(taChat);

        btnSendToAll.setText("Send to all");
        btnSendToAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendToAllActionPerformed(evt);
            }
        });

        btnSendTo.setText("Send to");
        btnSendTo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendToActionPerformed(evt);
            }
        });

        jLabel7.setText("Choose user:");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)
                    .addComponent(edtSendMess)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(btnSendToAll, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSendTo, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtChooseName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(edtSendMess, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSendToAll)
                    .addComponent(btnSendTo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtChooseName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSendToAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendToAllActionPerformed
        // TODO add your handling code here:
        String messSend = "chat:server: " + edtSendMess.getText().toString();
        sendToAll(messSend);
    }//GEN-LAST:event_btnSendToAllActionPerformed

    private void btnStartStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartStopActionPerformed
        // TODO add your handling code here:
        if (btnStartStop.getText().equals("Start Server")) {
            btnStartStop.setText("Stop Server");
            mServerThread = new mainServerThread();
            mServerThread.start();
        } else {
            btnStartStop.setText("Start Server");

            sendToAll("disconnect:");
            removeAllUser();
            
            mServerThread.stop();
            try {
                serverSocket.close();
            } catch (IOException ex) {
                Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
            }
            serverStatus(false, 0);
        }

    }//GEN-LAST:event_btnStartStopActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        String[] t = {};
        lsUser.setListData(t);
        btnSendTo.setEnabled(false);
    }//GEN-LAST:event_formWindowOpened

    private void btnSendToActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendToActionPerformed
        // TODO add your handling code here:
        String messSend = "chat:server: " + edtSendMess.getText().toString();
        sendToPerson(chooseName, messSend);
        
    }//GEN-LAST:event_btnSendToActionPerformed

    private void lsUserMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lsUserMouseClicked
        // TODO add your handling code here:
        chooseName = lsUser.getSelectedValue();
        txtChooseName.setText(chooseName);
        btnSendTo.setEnabled(true);
    }//GEN-LAST:event_lsUserMouseClicked

    private void btnRemoveUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveUserActionPerformed
        // TODO add your handling code here:hello 
        removeUser(chooseName);
    }//GEN-LAST:event_btnRemoveUserActionPerformed

    // the name choose from list user
    String chooseName = "";
    //this is thread manager server start stop
    mainServerThread mServerThread;

    ServerSocket serverSocket;

    //this manager all socket connect to client
    HashMap<String, Socket> clientSocket = new HashMap<>();

    //this manager all thread
    HashMap<String, Thread> clientThreadManager = new HashMap<>();

    // this thread is server manager
    private class mainServerThread extends Thread {

        int port;

        @Override
        public void run() {
            super.run(); //To change body of generated methods, choose Tools | Templates.
            // id auto create to manager client when client don't have a name
            int autoID = 0;
            String id;

            // get port from UI
            String inputPort = edtChangePort.getText().toString().trim();
            if (inputPort.isEmpty()) {
                inputPort = "3000";
            }
            port = Integer.parseInt(inputPort);

            boolean start = false;
            // start server
            start = true;
            serverStatus(start, port);

            try {
                // server listen client connect with port
                serverSocket = new ServerSocket(port);
            } catch (IOException ex) {
                ex.printStackTrace();
            }

            while (start) {
                try {
                    autoID++;
                    id = "Anonymous " + autoID;
                    // stay here while a client connect
                    Socket socket = serverSocket.accept();
                    // if have user connect
                    // change id

                    // add socket to list to manager
                    clientSocket.put(id, socket);

                    // start a new thread for manager client
                    clientThread cliThread = new clientThread(id);
//                    cliThread.stop();
                    // add id thread to list to manager
                    clientThreadManager.put(id, cliThread);

                    cliThread.start();
                    // alert in ui
                    taInfo.append("user " + id + " connect \n");

                } catch (IOException ex) {
                    Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            //up date status to UI

        }

    }

    private class clientThread extends Thread {

        String id;
        Socket socket;
        //opent thread read data in put
        BufferedReader input = null;
        BufferedWriter output = null;

        private clientThread(String Id) {
            this.id = Id;
        }

        @Override
        public void run() {
            super.run(); //To change body of generated methods, choose Tools | Templates.

            socket = clientSocket.get(id);

            String userName = "";
            try {
                // get socket form id
                input = new BufferedReader(
                        new InputStreamReader(
                                socket.getInputStream()));
                output = new BufferedWriter(
                        new OutputStreamWriter(
                                socket.getOutputStream()));
            } catch (IOException ex) {
                ex.printStackTrace();
                taInfo.append("Error opent thread reader, writer client " + id + "\n");
            }
            String inputMessage;

            // listen user 
            try {
                while (true) {
                    //listen while user flush a message
                    inputMessage = input.readLine();
                    taInfo.append(inputMessage + "\n");
                    //if action = chat analyst and send to user
                    // user talk to server <action>:<message>
                    // get action
                    String action = inputMessage.substring(0, inputMessage.indexOf(":"));

                    //get message
                    String mess = inputMessage.substring(inputMessage.indexOf(":") + 1, inputMessage.length());
                    // analysis action
                    taInfo.append("action : " + action + " Mess: " + mess + "\n");
                    if (action.equals("chat")) {//if action is chat

                        // create message to send to user
                        String messSend;
                        if (userName.equals("")) {
                            messSend = id + ": " + mess;
                        } else {
                            messSend = userName + ": " + mess;
                        }

                        System.out.println(mess);
                        System.out.println(mess.indexOf(":"));

                        if (mess.indexOf(":") != -1) { //if mess have ":" send to user have name before ":"
                            //get client socket to send
                            String cliName = mess.substring(0, mess.indexOf(":"));
                            messSend = "chat:" + userName + mess.substring(mess.indexOf(":"), mess.length());
                            sendToPerson(cliName, messSend);
                            //update chat to ui
                            taChat.append("--> " + cliName + ": " + mess.substring(mess.indexOf(":") + 1, mess.length()) + "\n");
                        } else {// send to all user if mess don't have ":"
                            //set action for mess
                            messSend = "chat:" + messSend;
                            sendToAll(messSend);

                        }

                    } else if (action.equals("setName")) {

                        //put to hashmap name of user
                        clientSocket.put(mess, clientSocket.get(id));
                        //remove old user manager socket
                        clientSocket.remove(id);

                        //put to hashmap name manager thread
                        clientThreadManager.put(mess, clientThreadManager.get(id));
                        //remove old user manager thread
                        clientThreadManager.remove(id);

                        // change socket to get by name
                        socket = clientSocket.get(mess);//mess is name

                        //change thread read
                        input = new BufferedReader(
                                new InputStreamReader(
                                        socket.getInputStream()));
                        // change thread write
                        output = new BufferedWriter(
                                new OutputStreamWriter(
                                        socket.getOutputStream()));
                        //update ui list user
                        updateListUser();
                        taInfo.append("user " + id + "set name to " + mess + "\n");
                        userName = mess;

                    } else if (action.equals("disconnect") ){
                        new userDisconnect(userName).start();
                    }
                }
            } catch (Exception e) {
                taInfo.append("Error user " + id + "input message\n");
                e.printStackTrace();
            }

        }

    }

    private void sendToPerson(String name, String mess) {
        try {
            Socket cliSoc = clientSocket.get(name);
            BufferedWriter cliWriter = new BufferedWriter(
                    new OutputStreamWriter(cliSoc.getOutputStream()));

            cliWriter.write(mess);
            cliWriter.newLine();
            cliWriter.flush();
            taChat.append("-->" + name + ": " + mess.substring(mess.indexOf(":")+1, mess.length()) + "\n");
        } catch (Exception e) {
            taInfo.append("can't find " + name);
            e.printStackTrace();
        }

    }

    private void sendToAll(String mess) {
        try {
            for (Map.Entry<String, Socket> entry : clientSocket.entrySet()) {

                //get name each other
                String name = entry.getKey();
                //send mess to each other
                sendToPerson(name, mess);
            }
        } catch (Exception e) {

            System.out.println("error" + e);
        }
        //update chat to ui
        taChat.append(mess.substring(mess.indexOf(":") + 1, mess.length()) + "\n");
    }

    private void updateListUser() {
        String[] listUser = new String[clientSocket.size()];
        int i = 0;
        for (Map.Entry<String, Socket> entry : clientSocket.entrySet()) {
            listUser[i] = entry.getKey();
            i++;
        }
        lsUser.setListData(listUser);
        sendListToAllUser(listUser);
    }

    private void sendListToAllUser(String[] list) {
        //create format list and send to user
        String listSend = "";
        for (int i = 0; i < list.length; i++) {
            listSend += list[i] + ",";
        }
        listSend = "updateList:" + listSend.substring(0, listSend.lastIndexOf(","));
        System.out.println(listSend);
        try {
            for (Map.Entry<String, Socket> entry : clientSocket.entrySet()) {
                // get socket of client
                Socket cliSocket = entry.getValue();
                // create a writer to write mess to user
                BufferedWriter cliWriter = new BufferedWriter(
                        new OutputStreamWriter(cliSocket.getOutputStream()));

                // write mess and send to user
                cliWriter.write(listSend);
                cliWriter.newLine();
                cliWriter.flush();

            }
        } catch (Exception e) {

            System.out.println("error" + e);
        }
    }

    private void serverStatus(boolean Start, int Port) {
        if (Start) { // when server start
            // show server status
            txtServerStatus.setText("Server Start with port " + Port);
            taInfo.append("Server running...\n");
            //show local host adress in UI
            try {
                // get local host adress
                String serverHost = InetAddress.getLocalHost().getHostAddress();

                //get host
                for (final Enumeration< NetworkInterface> interfaces
                        = NetworkInterface.getNetworkInterfaces();
                        interfaces.hasMoreElements();) {
                    final NetworkInterface cur = interfaces.nextElement();

                    if (cur.isLoopback()) {
                        continue;
                    }

                    System.out.println("interface " + cur.getName());

                    for (final InterfaceAddress addr : cur.getInterfaceAddresses()) {
                        final InetAddress inet_addr = addr.getAddress();

                        if (!(inet_addr instanceof Inet4Address)) {
                            continue;
                        }

                        serverHost = inet_addr.getHostAddress();
                    }
                }

                txtServerHost.setText(serverHost);
            } catch (Exception e) {
                // show error
                txtServerHost.setText("can't get local host");
                e.printStackTrace();

            }
        } else { // when server stop
            // show server status
            txtServerStatus.setText("Server Stop");
            txtServerHost.setText("");
            taInfo.setText("");
            taChat.setText("");
        }

    }

    private void removeUser(String name) {
        //create message disconnect and send to person
        sendToPerson(name, "disconnect:");
        new userDisconnect(name).start();
    }
    private void removeAllUser(){
        String name = "";
        for (Map.Entry<String, Socket> entry : clientSocket.entrySet()){
             name = entry.getKey();
             removeUser(name);
        }
    }
    
    private class userDisconnect extends Thread{

        String name;
        private userDisconnect(String Name){
            this.name = Name;
        }
        
        @Override
        public void run() {
            super.run(); //To change body of generated methods, choose Tools | Templates.
            sendToAll("user: " + name + " disconnect");
        
        //close thread which connect with client
        clientThreadManager.get(name).stop();
        
        //delete socket manager this client
        clientSocket.remove(name);
        
        //delete cliend thread
        clientThreadManager.remove(name);
        
        //update list user in ui
        updateListUser();
        }
        
        
    }

    private BufferedWriter getUserWriter(String name) {
        Socket soc = clientSocket.get(name);
        BufferedWriter writer = null;
        try {
            writer = new BufferedWriter(new OutputStreamWriter(soc.getOutputStream()));
        } catch (IOException e) {
            System.out.println("can't get user writer " + name);
        }
        return writer;
    }

    private BufferedReader getUserReader(String name) {
        Socket soc = clientSocket.get(name);
        BufferedReader reader = null;
        try {
            reader = new BufferedReader(new InputStreamReader(soc.getInputStream()));
        } catch (IOException e) {
            System.out.println("can't get user reader " + name);
        }
        return reader;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Server().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRemoveUser;
    private javax.swing.JButton btnSendTo;
    private javax.swing.JButton btnSendToAll;
    private javax.swing.JButton btnStartStop;
    private javax.swing.JTextField edtChangePort;
    private javax.swing.JTextField edtSendMess;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList<String> lsUser;
    private javax.swing.JTextArea taChat;
    private javax.swing.JTextArea taInfo;
    private javax.swing.JLabel txtChooseName;
    private javax.swing.JLabel txtServerHost;
    private javax.swing.JLabel txtServerStatus;
    // End of variables declaration//GEN-END:variables
}
